---
// 导入自定义样式
import '../styles/markdown-renderer.css'
---

<div class="markdown-container">
  <slot />
</div>

<script is:inline>
  // 调试输出
  console.log('[MarkdownRenderer] 脚本已注入');

  const copySvg = `
    <svg class="copy-icon" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
      <rect x="9" y="9" width="13" height="13" rx="2" ry="2"/>
      <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"/>
    </svg>`;
  // 不再插入 checkSvg

  function addCopyButtonToBlock(preElement, codeElement) {
    if (preElement.parentElement?.classList.contains('code-block-enhanced')) return;
    const code = codeElement.textContent || '';
    let language = preElement.getAttribute('data-language');
    if (!language) {
      const classNames = preElement.className || '';
      const languageMatch = classNames.match(/language-(\w+)/);
      language = languageMatch ? languageMatch[1] : 'text';
    }
    const wrapper = document.createElement('div');
    wrapper.className = 'code-block-enhanced';
    const header = document.createElement('div');
    header.className = 'code-header';
    const languageTag = document.createElement('span');
    languageTag.className = 'language-tag';
    languageTag.textContent = language.toUpperCase();
    const copyButton = document.createElement('button');
    copyButton.className = 'copy-btn code-copy-btn';
    copyButton.setAttribute('data-code', code);
    copyButton.innerHTML = copySvg;
    header.appendChild(languageTag);
    header.appendChild(copyButton);
    wrapper.appendChild(header);
    const parent = preElement.parentNode;
    const next = preElement.nextSibling;
    if (parent) {
      parent.insertBefore(wrapper, next);
    }
    wrapper.appendChild(preElement);
    copyButton.addEventListener('click', async () => {
      try {
        await navigator.clipboard.writeText(code);
        // 不再高亮按钮
      } catch (err) {
        console.error('复制失败:', err);
      }
    });
  }

  function addCopyButtonToInlineCode(codeElement) {
    if (codeElement.parentElement?.classList.contains('inline-code-enhanced')) return;
    const code = codeElement.textContent || '';
    const wrapper = document.createElement('span');
    wrapper.className = 'inline-code-enhanced';
    codeElement.parentNode?.insertBefore(wrapper, codeElement);
    wrapper.appendChild(codeElement);
    const copyButton = document.createElement('button');
    copyButton.className = 'copy-btn inline-copy-btn';
    copyButton.setAttribute('data-code', code);
    copyButton.innerHTML = copySvg;
    wrapper.appendChild(copyButton);
    copyButton.addEventListener('click', async (e) => {
      e.stopPropagation();
      try {
        await navigator.clipboard.writeText(code);
        // 不再高亮按钮
      } catch (err) {
        console.error('复制失败:', err);
      }
    });
  }

  function initializeCodeBlocks() {
    // 只处理多行代码块
    const codeBlocks = document.querySelectorAll('.markdown-container pre.astro-code');
    codeBlocks.forEach((preElement) => {
      const codeElement = preElement.querySelector('code');
      if (!codeElement) return;
      addCopyButtonToBlock(preElement, codeElement);
    });
    // 不再处理行内代码
  }

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => setTimeout(initializeCodeBlocks, 0));
  } else {
    setTimeout(initializeCodeBlocks, 0);
  }
  window.initializeCodeBlocks = initializeCodeBlocks;
</script>

<style>
  /* === 基础容器样式 === */
  .markdown-container {
    @apply text-foreground leading-relaxed;
    color: hsl(var(--foreground));
    line-height: 1.7;
  }

  /* === 标题样式 - 极简设计 === */
  .markdown-container h1 {
    @apply text-3xl font-bold mb-8 mt-12 pb-3;
    color: hsl(var(--foreground));
    border-bottom: 1px solid hsl(var(--border));
    letter-spacing: -0.025em;
  }

  .markdown-container h2 {
    @apply text-2xl font-semibold mb-6 mt-10;
    color: hsl(var(--foreground));
    letter-spacing: -0.02em;
    position: relative;
    padding-left: 0.75rem;
  }

  .markdown-container h2::before {
    content: '';
    position: absolute;
    left: 0;
    top: 0.125rem;
    bottom: 0.125rem;
    width: 3px;
    background: hsl(var(--primary));
    border-radius: 1.5px;
  }

  .markdown-container h3 {
    @apply text-xl font-medium mb-4 mt-8;
    color: hsl(var(--foreground));
    letter-spacing: -0.015em;
  }

  .markdown-container h4 {
    @apply text-lg font-medium mb-3 mt-6;
    color: hsl(var(--foreground));
  }

  .markdown-container h5,
  .markdown-container h6 {
    @apply text-base font-medium mb-2 mt-4;
    color: hsl(var(--muted-foreground));
  }

  /* === 段落和文本样式 === */
  .markdown-container p {
    @apply mb-5;
    color: hsl(var(--foreground));
    line-height: 1.75;
  }

  .markdown-container strong {
    @apply font-semibold;
    color: hsl(var(--foreground));
  }

  .markdown-container em {
    @apply italic;
    color: hsl(var(--foreground));
  }

  .markdown-container del {
    @apply line-through;
    color: hsl(var(--muted-foreground));
  }

  /* === 列表样式 === */
  .markdown-container ul,
  .markdown-container ol {
    @apply mb-5 pl-6;
  }

  .markdown-container ul li {
    @apply mb-1.5 relative;
    color: hsl(var(--foreground));
    list-style: none;
  }

  .markdown-container ul li::before {
    content: '•';
    position: absolute;
    left: -1.25rem;
    color: hsl(var(--primary));
    font-weight: 600;
  }

  .markdown-container ol li {
    @apply mb-1.5;
    color: hsl(var(--foreground));
    list-style-type: decimal;
    list-style-position: outside;
  }

  .markdown-container ol {
    counter-reset: item;
  }

  .markdown-container ol li {
    list-style: none;
    counter-increment: item;
    position: relative;
  }

  .markdown-container ol li::before {
    content: counter(item) '.';
    position: absolute;
    left: -1.5rem;
    color: hsl(var(--primary));
    font-weight: 600;
    font-size: 0.9em;
  }

  /* === 引用块样式 === */
  .markdown-container blockquote {
    @apply my-6 py-4 px-5 rounded-r-lg relative;
    background: hsl(var(--secondary) / 0.5);
    border-left: 4px solid hsl(var(--primary));
    font-style: italic;
    color: hsl(var(--muted-foreground));
  }

  .markdown-container blockquote p {
    @apply mb-0;
  }

  /* === 链接样式 === */
  .markdown-container a {
    color: hsl(var(--primary));
    text-decoration: none;
    position: relative;
    transition: all 0.2s ease;
  }

  .markdown-container a:hover {
    color: hsl(var(--primary) / 0.8);
  }

  .markdown-container a::after {
    content: '';
    position: absolute;
    bottom: -1px;
    left: 0;
    width: 0;
    height: 1px;
    background: hsl(var(--primary));
    transition: width 0.3s ease;
  }

  .markdown-container a:hover::after {
    width: 100%;
  }

  /* === 内联代码样式 === */
  .markdown-container :not(pre) > code {
    @apply px-1.5 py-0.5 rounded text-sm font-mono;
    background: hsl(var(--secondary));
    color: hsl(var(--foreground));
    border: 1px solid hsl(var(--border));
    font-size: 0.875em;
    white-space: nowrap;
  }

  /* === 代码块容器样式 === */
  .code-block-enhanced {
    @apply my-8 rounded-xl overflow-hidden;
    background: hsl(var(--card));
    border: 1px solid hsl(var(--border));
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
  }

  .code-header {
    @apply flex items-center justify-between px-4 py-3;
    background: hsl(var(--muted) / 0.3);
    border-bottom: 1px solid hsl(var(--border));
    backdrop-filter: blur(8px);
  }

  .language-tag {
    @apply text-xs font-mono font-medium px-2 py-1 rounded;
    background: hsl(var(--primary));
    color: hsl(var(--primary-foreground));
    letter-spacing: 0.05em;
  }

  .copy-btn {
    @apply flex items-center justify-center w-8 h-8 rounded-md transition-all duration-200;
    background: transparent;
    color: hsl(var(--muted-foreground));
    border: 1px solid transparent;
  }

  .copy-btn:hover {
    background: hsl(var(--secondary));
    color: hsl(var(--foreground));
    border-color: hsl(var(--border));
    transform: translateY(-1px);
  }

  .copy-btn.copied {
    background: hsl(var(--primary));
    color: hsl(var(--primary-foreground));
    border-color: hsl(var(--primary));
  }

  .copy-icon,
  .check-icon {
    transition: all 0.2s ease;
  }

  .hidden {
    display: none;
  }

  /* === 代码块内容样式 === */
  .code-block-enhanced pre {
    @apply p-4 m-0 overflow-x-auto;
    background: hsl(var(--card));
    font-family: 'JetBrains Mono', 'Fira Code', 'SF Mono', 'Monaco', 'Consolas', monospace;
    font-size: 0.875rem;
    line-height: 1.6;
  }

  .code-block-enhanced pre code {
    @apply p-0;
    background: transparent;
    border: none;
    font-size: inherit;
    white-space: pre;
  }

  /* === 表格样式 === */
  .markdown-container table {
    @apply w-full my-8 rounded-lg overflow-hidden;
    border: 1px solid hsl(var(--border));
    border-collapse: separate;
    border-spacing: 0;
  }

  .markdown-container th {
    @apply px-4 py-3 text-left font-semibold;
    background: hsl(var(--muted) / 0.5);
    border-bottom: 1px solid hsl(var(--border));
    color: hsl(var(--foreground));
    font-size: 0.9em;
    letter-spacing: 0.025em;
  }

  .markdown-container td {
    @apply px-4 py-3 border-b;
    border-color: hsl(var(--border));
    color: hsl(var(--foreground));
  }

  .markdown-container tr:last-child td {
    border-bottom: none;
  }

  .markdown-container tr:hover {
    background: hsl(var(--muted) / 0.3);
  }

  /* === 图片样式 === */
  .markdown-container img {
    @apply rounded-lg my-8 max-w-full h-auto;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
  }

  /* === 分割线样式 === */
  .markdown-container hr {
    @apply border-none my-12 h-px;
    background: linear-gradient(90deg, transparent, hsl(var(--border)), transparent);
  }

  /* === 任务列表样式 === */
  .markdown-container input[type="checkbox"] {
    @apply mr-3 w-4 h-4 rounded;
    accent-color: hsl(var(--primary));
  }

  .markdown-container input[type="checkbox"]:checked + span {
    color: hsl(var(--muted-foreground));
    text-decoration: line-through;
  }

  /* === 响应式设计 === */
  @media (max-width: 768px) {
    .markdown-container {
      font-size: 0.95rem;
    }

    .markdown-container h1 {
      @apply text-2xl mb-6 mt-8;
    }

    .markdown-container h2 {
      @apply text-xl mb-4 mt-6 pl-3;
    }

    .markdown-container h2::before {
      width: 2px;
    }

    .markdown-container h3 {
      @apply text-lg mb-3 mt-5;
    }

    .code-block-enhanced {
      @apply mx-0 rounded-lg;
    }

    .code-header {
      @apply px-3 py-2;
    }

    .language-tag {
      @apply text-xs px-1.5;
    }

    .code-block-enhanced pre {
      @apply p-3 text-sm;
    }

    .markdown-container table {
      @apply text-sm;
    }

    .markdown-container th,
    .markdown-container td {
      @apply px-3 py-2;
    }
  }

  /* === 滚动条样式 === */
  .code-block-enhanced pre::-webkit-scrollbar {
    height: 6px;
  }

  .code-block-enhanced pre::-webkit-scrollbar-track {
    background: transparent;
  }

  .code-block-enhanced pre::-webkit-scrollbar-thumb {
    background: hsl(var(--border));
    border-radius: 3px;
  }

  .code-block-enhanced pre::-webkit-scrollbar-thumb:hover {
    background: hsl(var(--muted-foreground));
  }

  /* === 动画效果 === */
  @keyframes fadeIn {
    from { opacity: 0; transform: translateY(4px); }
    to { opacity: 1; transform: translateY(0); }
  }

  .code-block-enhanced {
    animation: fadeIn 0.3s ease-out;
  }

  @keyframes checkPop {
    0% { transform: scale(0.8); opacity: 0.5; }
    50% { transform: scale(1.1); opacity: 1; }
    100% { transform: scale(1); opacity: 1; }
  }

  .copy-btn.copied .check-icon {
    animation: checkPop 0.3s ease-out;
  }
</style> 